//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3649
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrifleJS.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TrifleJS.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///    json2.js
        ///    2013-05-26
        ///
        ///    Public Domain.
        ///
        ///    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
        ///
        ///    See http://www.JSON.org/js.html
        ///
        ///
        ///    This code should be minified before deployment.
        ///    See http://javascript.crockford.com/jsmin.html
        ///
        ///    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
        ///    NOT CONTROL.
        ///
        ///
        ///    This file creates a global JSON object containing two methods: stringify
        ///    and parse.
        ///
        ///        JSON.stringify(value, replacer, space [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ie_json2 {
            get {
                return ResourceManager.GetString("ie_json2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ////*
        ///// Initialize tools
        ///window.__tools = window.__tools || {};
        ///
        ///// Loads a JS file and executes a callback when ready
        ///window.__tools.includeJs = function(url, callbackId) {
        ///
        ///    window.external.xdebug([&apos;window.__tools.includeJs(url, callbackId)&apos;, url, callbackId]);
        ///
        ///    // Generate DOM for new &lt;script/&gt; tagg
        ///    var head = document.getElementsByTagName(&quot;head&quot;)[0] || document.documentElement;
        ///    var script = document.createElement(&quot;script&quot;);
        ///    script.id = &apos;script&apos; + callbackId;
        ///    script.sr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ie_tools {
            get {
                return ResourceManager.GetString("ie_tools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///* init.js
        ///*
        ///* By: Steven de Salas
        ///* On: Sep 2013
        ///* 
        ///*
        ///* Generates the core running environment for
        ///* javascript code to execute under
        ///* 
        ///*/
        ///
        ///(function(GLOBAL) {
        ///
        ///    // Save imported params
        ///    var API = {
        ///        phantom: GLOBAL.phantom,
        ///        trifle: GLOBAL.trifle,
        ///        console: GLOBAL.console,
        ///        window: GLOBAL.window
        ///    };
        ///
        ///    delete GLOBAL.phantom;
        ///    delete GLOBAL.trifle;
        ///    delete GLOBAL.console;
        ///    delete GLOBAL.window;
        ///
        ///    // Initialise window object
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string init {
            get {
                return ResourceManager.GetString("init", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var isCommonJS = typeof window == &quot;undefined&quot;;
        ///
        ////**
        ///* Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.
        ///*
        ///* @namespace
        ///*/
        ///var jasmine = {};
        ///if (isCommonJS) exports.jasmine = jasmine;
        ////**
        ///* @private
        ///*/
        ///jasmine.unimplementedMethod_ = function() {
        ///    throw new Error(&quot;unimplemented method&quot;);
        ///};
        ///
        ////**
        ///* Use &lt;code&gt;jasmine.undefined&lt;/code&gt; instead of &lt;code&gt;undefined&lt;/code&gt;, since &lt;code&gt;undefined&lt;/code&gt; is just
        ///* a plain old variable and may be redefined by some [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string test_lib_jasmine {
            get {
                return ResourceManager.GetString("test_lib_jasmine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to jasmine.ConsoleReporter = function(print, doneCallback, showColors) {
        ///    //inspired by mhevery&apos;s jasmine-node reporter
        ///    //https://github.com/mhevery/jasmine-node
        ///
        ///    doneCallback = doneCallback || function() { };
        ///
        ///    var ansi = {
        ///        green: &apos;\033[32m&apos;,
        ///        red: &apos;\033[31m&apos;,
        ///        yellow: &apos;\033[33m&apos;,
        ///        none: &apos;\033[0m&apos;
        ///    },
        ///    language = {
        ///        spec: &quot;spec&quot;,
        ///        failure: &quot;failure&quot;
        ///    };
        ///
        ///    function coloredStr(color, str) {
        ///        return showColors ? (ansi[c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string test_lib_jasmine_console {
            get {
                return ResourceManager.GetString("test_lib_jasmine_console", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///
        ///// Launch tests
        ///var jasmineEnv = jasmine.getEnv();
        ///
        ///// Add a ConsoleReporter to 
        ///// 1) print with colors on the console 
        ///// 2) exit when finished
        ///jasmineEnv.addReporter(new jasmine.ConsoleReporter(function(msg) {
        ///    // Apply color
        ///    var ansi = {
        ///        green: &apos;\033[32m&apos;,
        ///        red: &apos;\033[31m&apos;,
        ///        yellow: &apos;\033[33m&apos;,
        ///        none: &apos;\033[0m&apos;,
        ///        newline: &apos;\n&apos;
        ///    };
        ///    msg = msg.replace(ansi.newline, &apos;&apos;).replace(ansi.none, &apos;&apos;);
        ///    var printInColor = function(color, messag [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string test_run_jasmine {
            get {
                return ResourceManager.GetString("test_run_jasmine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to describe(&quot;phantom global object&quot;, function() {
        ///    it(&quot;should exist&quot;, function() {
        ///        expect(typeof phantom).toEqual(&apos;object&apos;);
        ///    });
        ///
        ///    it(&quot;should have args property&quot;, function() {
        ///        expect(phantom.hasOwnProperty(&apos;args&apos;)).toBeTruthy();
        ///    });
        ///
        ///    it(&quot;should have args as an array&quot;, function() {
        ///        expect(typeof phantom.args).toEqual(&apos;object&apos;);
        ///    });
        ///
        ///    it(&quot;should have libraryPath property&quot;, function() {
        ///        expect(phantom.hasOwnProperty(&apos;libraryPath&apos;)).toBeTruthy( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string test_spec_phantom {
            get {
                return ResourceManager.GetString("test_spec_phantom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to console.debug(phantom.libraryPath);
        ///
        ///phantom.injectJs(&quot;../../test/tools.js&quot;);
        ///
        ///function checkClipRect(page, clipRect) {
        ///    expectHasProperty(page, &apos;clipRect&apos;);
        ///    it(&quot;should have clipRect with height &quot;+clipRect.height, function () {
        ///        expect(page.clipRect.height).toEqual(clipRect.height);
        ///    });
        ///    it(&quot;should have clipRect with left &quot;+clipRect.left, function () {
        ///        expect(page.clipRect.left).toEqual(clipRect.left);
        ///    });
        ///    it(&quot;should have clipRect with top &quot;+clipRect.top, fun [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string test_spec_webpage {
            get {
                return ResourceManager.GetString("test_spec_webpage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///// Add Helper Functions
        ///function expectHasFunction(o, name) {
        ///    it(&quot;should have &apos;&quot; + name + &quot;&apos; function&quot;, function() {
        ///        expect(typeof o[name]).toEqual(&apos;function&apos;);
        ///    });
        ///}
        ///
        ///function expectHasProperty(o, name) {
        ///    it(&quot;should have &apos;&quot; + name + &quot;&apos; property&quot;, function() {
        ///        expect(o.hasOwnProperty(name)).toBeTruthy();
        ///    });
        ///}
        ///
        ///function expectHasPropertyString(o, name) {
        ///    expectHasProperty(o, name);
        ///
        ///    it(&quot;should have &apos;&quot; + name + &quot;&apos; as a string&quot;, function() {
        ///        e [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string test_tools {
            get {
                return ResourceManager.GetString("test_tools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///* Callback.js
        ///*
        ///* By: Steven de Salas
        ///* On: Sep 2013
        ///* 
        ///* Generates a Callback object used for async
        ///* communication between V8 and C# runtime.
        ///* 
        ///*/
        ///
        ///// Initialise Namespace
        ///this.trifle = this.trifle || {};
        ///
        ///// Wrap code to avoid global vars
        ///(function(trifle) {
        ///
        ///    // Closure variable that tracks existing callbacks
        ///    // (hidden from outside world)
        ///    var callbacks = {};
        ///
        ///    // Callback Class
        ///    // Define Constructor
        ///    var Callback = trifle.Callback = function(func, scope,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string trifle_Callback {
            get {
                return ResourceManager.GetString("trifle_Callback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///* FileSystem.js
        ///*
        ///* By: Steven de Salas
        ///* On: Sep 2013
        ///* 
        ///* Defines a FileSystem class representing a
        ///* helper for file read/write operations and management.
        ///* 
        ///*/
        ///
        ///// Initialise Namespace
        ///this.trifle = this.trifle || {};
        ///trifle.modules = trifle.modules || {};
        ///
        ///// Wrap code to avoid global vars
        ///(function(trifle) {
        ///
        ///
        ///    // Define Constructor
        ///    var FileSystem = trifle.modules.FileSystem = function() {
        ///        console.xdebug(&quot;new FileSystem()&quot;);
        ///        // Instantiate a V8 FileSyste [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string trifle_modules_FileSystem {
            get {
                return ResourceManager.GetString("trifle_modules_FileSystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///* System.js
        ///*
        ///* By: Steven de Salas
        ///* On: Sep 2013
        ///* 
        ///* Defines a System class representing a
        ///* general program helper.
        ///* 
        ///*/
        ///
        ///// Initialise Namespace
        ///this.trifle = this.trifle || {};
        ///trifle.modules = trifle.modules || {};
        ///
        ///// Wrap code to avoid global vars
        ///(function(trifle) {
        ///
        ///
        ///    // Define Constructor
        ///    var System = trifle.modules.System = function() {
        ///        console.xdebug(&quot;new System()&quot;);
        ///        // Instantiate a V8 System object and stores it in internal API property
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string trifle_modules_System {
            get {
                return ResourceManager.GetString("trifle_modules_System", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///* WebPage.js
        ///*
        ///* By: Steven de Salas
        ///* On: Sep 2013
        ///* 
        ///* Defines an object representing a
        ///* browser page opened inside IE environment.
        ///* 
        ///*/
        ///
        ///// Initialise Namespace
        ///this.trifle = this.trifle || {};
        ///trifle.modules = trifle.modules || {};
        ///
        ///// Wrap code to avoid global vars
        ///(function(trifle) {
        ///
        ///    // Define Constructor
        ///    var WebPage = this.WebPage = window.WebPage = trifle.modules.WebPage = function() {
        ///        console.xdebug(&quot;new WebPage()&quot;);
        ///        // Instantiate a V8 WebPage obj [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string trifle_modules_WebPage {
            get {
                return ResourceManager.GetString("trifle_modules_WebPage", resourceCulture);
            }
        }
    }
}
